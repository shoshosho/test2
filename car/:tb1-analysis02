{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import pickle\n",
    "import time\n",
    "import dask.dataframe as dskdf\n",
    "import dask"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "現在のデータ作成流れ：\n",
    "\n",
    "■マスタ\n",
    "    成約データ\n",
    "■地域\n",
    "    国勢調査\n",
    "    都道府県別保有台数\n",
    "    カスタマDB\n",
    "    市区町村別保有台数（未受領）\n",
    "    問い合わせ件数\n",
    "■車種\n",
    "    問い合わせ件数\n",
    "    お気に入り件数\n",
    "    カタログ\n",
    "■マスタへのマージ\n",
    "↓\n",
    "市区町村名と対応した辞書作成"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "あるべきデータ作成流れ：\n",
    "・マスタ\n",
    "    ●成約データ（マスタ）\n",
    "・地域（市区町村名、都道府県名をキーとする）\n",
    "    ●国勢調査（地域）\n",
    "    ●都道府県別保有台数（地域）\n",
    "    ●カスタマDB（地域）\n",
    "    ▲市区町村別保有台数（未受領、地域）\n",
    "・車種（車種名をキーとする）\n",
    "    ●問い合わせ件数（地域、車種）\n",
    "    ●お気に入り件数（車種）\n",
    "    ▲カタログ（車種）\n",
    "↓\n",
    "・市区町村名と対応した辞書作成\n",
    "・車種名と対応した辞書作成\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "class make_raw_data():"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#面倒な前処理部分は今回エクセル上で実施済み\n",
    "#別途前処理をするコードが必要\n",
    "def __init__():\n",
    "    import pandas as pd\n",
    "    import numpy as np\n",
    "    import pickle\n",
    "    import time\n",
    "    import dask.dataframe as dskdf\n",
    "    import dask"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>--------------------国勢調査ー読み込みー開始-------------------------<b/>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#国勢調査\n",
    "def mkdt_kokusei():\n",
    "    kokusei = pd.read_csv(\"/Users/01017387/Desktop/しごと/data/car用/加工済み/kokuseichosa_2015_for_merge.csv\")\n",
    "    #全てを英字変換する必要あり\n",
    "    kokusei.columns=[\"pref_code\", \"pref_city_code\", \"capital_city_flg\", \"city_categories\", \"chiho\", \"city_name\",\n",
    "                     \"population\", \"h22_kumikae_population\", \"population_changed_from_h22_to_h27\", \"rate_population_changed_from_h22_to_h27\",\n",
    "                     \"gross_area\", \"population_density\", \"ave_age_from_h22_to_h27\", \"med_age_from_h22_to_h27\", \"population\",\n",
    "                     \"population_under_15old\", \"population_from_15_to_64_old\", \"population_over_65old\", \"rate_population_under_15_year_old\",\n",
    "                     \"rate_population_from_15_to_64_old\", \"rate_population_over_65old\", \"population_male\",\"population_male_under_15old\",\n",
    "                     \"population_male_from_15_to_64_old\", \"population_male_over_65old\", \"rate_population_male_under_15old\",\n",
    "                     \"rate_population_male_from_15_to_64_old\", \"rate_population_male_over_65old\", \"population_female\",\n",
    "                     \"population_female_under_15old\", \"population_female_from_15_to_64_old\", \"population_female_over_65old\",\n",
    "                     \"rate_population_female_under_15old\", \"rate_population_female_from_15_to_64_old\", \"rate_population_female_over_65old\",\n",
    "                     \"rate_population_male_to female\", \"population_jap\", \"population_no_jap\", \"num_of_family\", \"num_of_normal_family\",\n",
    "                     \"num_of_family_in_facilities\", \"h22_kumikae_family\", \"num_of_normal_family\", \"num_of_nuclear_family\",\n",
    "                     \"num_of_family_no_children\", \"num_of_family_with_children\", \"num_of_father_and_children\", \"num_of_mother_and_children\",\n",
    "                     \"num_of_singles\", \"num_of_over_65old_singles\", \"num_of_old_married_couples_no_children\", \"num_of_3generation_family\",]\n",
    "    return kokusei"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['都道府県名', '乗用車', '軽', '普通', '世帯数', '車両数/世帯数', '普通車両数/世帯数', '軽車両数/世帯数',\n",
      "       '軽率', '普通率', '軽シェア', '普通シェア', '軽シェア×中古販売数', '普通シェア×中古販売数', '中古車販売台数'],\n",
      "      dtype='object')\n",
      "(47, 15)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>chiho</th>\n",
       "      <th>num_of_cars_all</th>\n",
       "      <th>num_of_cars_kei</th>\n",
       "      <th>num_of_cars_normal</th>\n",
       "      <th>num_of_familiy</th>\n",
       "      <th>cars_per_person</th>\n",
       "      <th>normal_cars_per_person</th>\n",
       "      <th>kei_cars_per_person</th>\n",
       "      <th>kei_rate</th>\n",
       "      <th>normal_rate</th>\n",
       "      <th>kei_share_in_JP</th>\n",
       "      <th>normal_share_in_JP</th>\n",
       "      <th>guess_2nd_hand_kei_car_sales_per_year</th>\n",
       "      <th>guess_2nd_hand_normal_car_sales_per_year</th>\n",
       "      <th>guess_2nd_hand_car_all_sales_per_year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>北海道</td>\n",
       "      <td>2,805,265</td>\n",
       "      <td>1142062</td>\n",
       "      <td>1,663,203</td>\n",
       "      <td>2,734,906</td>\n",
       "      <td>1.025726</td>\n",
       "      <td>0.608139</td>\n",
       "      <td>0.417587</td>\n",
       "      <td>40.71%</td>\n",
       "      <td>59.29%</td>\n",
       "      <td>3.77%</td>\n",
       "      <td>5.39%</td>\n",
       "      <td>37,693</td>\n",
       "      <td>161,743</td>\n",
       "      <td>199,436</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>青森</td>\n",
       "      <td>728,253</td>\n",
       "      <td>455493</td>\n",
       "      <td>272,760</td>\n",
       "      <td>586,148</td>\n",
       "      <td>1.242439</td>\n",
       "      <td>0.465343</td>\n",
       "      <td>0.777096</td>\n",
       "      <td>62.55%</td>\n",
       "      <td>37.45%</td>\n",
       "      <td>1.50%</td>\n",
       "      <td>0.88%</td>\n",
       "      <td>15,033</td>\n",
       "      <td>26,525</td>\n",
       "      <td>41,559</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>岩手</td>\n",
       "      <td>738,199</td>\n",
       "      <td>458943</td>\n",
       "      <td>279,256</td>\n",
       "      <td>517,845</td>\n",
       "      <td>1.425521</td>\n",
       "      <td>0.539266</td>\n",
       "      <td>0.886256</td>\n",
       "      <td>62.17%</td>\n",
       "      <td>37.83%</td>\n",
       "      <td>1.51%</td>\n",
       "      <td>0.91%</td>\n",
       "      <td>15,147</td>\n",
       "      <td>27,157</td>\n",
       "      <td>42,304</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>宮城</td>\n",
       "      <td>1,282,869</td>\n",
       "      <td>617560</td>\n",
       "      <td>665,309</td>\n",
       "      <td>961,574</td>\n",
       "      <td>1.334134</td>\n",
       "      <td>0.691896</td>\n",
       "      <td>0.642239</td>\n",
       "      <td>48.14%</td>\n",
       "      <td>51.86%</td>\n",
       "      <td>2.04%</td>\n",
       "      <td>2.16%</td>\n",
       "      <td>20,382</td>\n",
       "      <td>64,700</td>\n",
       "      <td>85,082</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>秋田</td>\n",
       "      <td>594,158</td>\n",
       "      <td>374063</td>\n",
       "      <td>220,095</td>\n",
       "      <td>424,208</td>\n",
       "      <td>1.400629</td>\n",
       "      <td>0.518837</td>\n",
       "      <td>0.881791</td>\n",
       "      <td>62.96%</td>\n",
       "      <td>37.04%</td>\n",
       "      <td>1.23%</td>\n",
       "      <td>0.71%</td>\n",
       "      <td>12,346</td>\n",
       "      <td>21,404</td>\n",
       "      <td>33,749</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  chiho num_of_cars_all  num_of_cars_kei num_of_cars_normal num_of_familiy  \\\n",
       "0   北海道       2,805,265          1142062          1,663,203      2,734,906   \n",
       "1    青森         728,253           455493            272,760        586,148   \n",
       "2    岩手         738,199           458943            279,256        517,845   \n",
       "3    宮城       1,282,869           617560            665,309        961,574   \n",
       "4    秋田         594,158           374063            220,095        424,208   \n",
       "\n",
       "   cars_per_person  normal_cars_per_person  kei_cars_per_person kei_rate  \\\n",
       "0         1.025726                0.608139             0.417587   40.71%   \n",
       "1         1.242439                0.465343             0.777096   62.55%   \n",
       "2         1.425521                0.539266             0.886256   62.17%   \n",
       "3         1.334134                0.691896             0.642239   48.14%   \n",
       "4         1.400629                0.518837             0.881791   62.96%   \n",
       "\n",
       "  normal_rate kei_share_in_JP normal_share_in_JP  \\\n",
       "0      59.29%           3.77%              5.39%   \n",
       "1      37.45%           1.50%              0.88%   \n",
       "2      37.83%           1.51%              0.91%   \n",
       "3      51.86%           2.04%              2.16%   \n",
       "4      37.04%           1.23%              0.71%   \n",
       "\n",
       "  guess_2nd_hand_kei_car_sales_per_year  \\\n",
       "0                                37,693   \n",
       "1                                15,033   \n",
       "2                                15,147   \n",
       "3                                20,382   \n",
       "4                                12,346   \n",
       "\n",
       "  guess_2nd_hand_normal_car_sales_per_year  \\\n",
       "0                                  161,743   \n",
       "1                                   26,525   \n",
       "2                                   27,157   \n",
       "3                                   64,700   \n",
       "4                                   21,404   \n",
       "\n",
       "  guess_2nd_hand_car_all_sales_per_year  \n",
       "0                               199,436  \n",
       "1                                41,559  \n",
       "2                                42,304  \n",
       "3                                85,082  \n",
       "4                                33,749  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#保有台数\n",
    "def mkdt_hoyu():\n",
    "    hoyu = pd.read_csv(\"/Users/01017387/Desktop/しごと/data/car用/加工済み/2015_hoyu_daisu.csv\",encoding=\"utf-8\")\n",
    "    hoyu.columns = [\"chiho\", \"num_of_cars_all\", \"num_of_cars_kei\", \"num_of_cars_normal\", \"num_of_familiy\", \"cars_per_person\",\n",
    "                    \"normal_cars_per_person\", \"kei_cars_per_person\", \"kei_rate\", \"normal_rate\", \"kei_share_in_JP\", \"normal_share_in_JP\",\n",
    "                    \"guess_2nd_hand_kei_car_sales_per_year\", \"guess_2nd_hand_normal_car_sales_per_year\", \"guess_2nd_hand_car_all_sales_per_year\"]\n",
    "    return hoyu"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1912, 66)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pref_code</th>\n",
       "      <th>pref_city_code</th>\n",
       "      <th>capital_city_flg</th>\n",
       "      <th>city_categories</th>\n",
       "      <th>chiho</th>\n",
       "      <th>city_name</th>\n",
       "      <th>population</th>\n",
       "      <th>h22_kumikae_population</th>\n",
       "      <th>population_changed_from_h22_to_h27</th>\n",
       "      <th>rate_population_changed_from_h22_to_h27</th>\n",
       "      <th>...</th>\n",
       "      <th>cars_per_person</th>\n",
       "      <th>normal_cars_per_person</th>\n",
       "      <th>kei_cars_per_person</th>\n",
       "      <th>kei_rate</th>\n",
       "      <th>normal_rate</th>\n",
       "      <th>kei_share_in_JP</th>\n",
       "      <th>normal_share_in_JP</th>\n",
       "      <th>guess_2nd_hand_kei_car_sales_per_year</th>\n",
       "      <th>guess_2nd_hand_normal_car_sales_per_year</th>\n",
       "      <th>guess_2nd_hand_car_all_sales_per_year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1907</th>\n",
       "      <td>47.0</td>\n",
       "      <td>47361.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>沖縄県</td>\n",
       "      <td>久米島町</td>\n",
       "      <td>7,755</td>\n",
       "      <td>8,519</td>\n",
       "      <td>-764</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1908</th>\n",
       "      <td>47.0</td>\n",
       "      <td>47362.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>沖縄県</td>\n",
       "      <td>八重瀬町</td>\n",
       "      <td>29,066</td>\n",
       "      <td>26,681</td>\n",
       "      <td>2,385</td>\n",
       "      <td>8.9</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1909</th>\n",
       "      <td>47.0</td>\n",
       "      <td>47375.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>沖縄県</td>\n",
       "      <td>多良間村</td>\n",
       "      <td>1,194</td>\n",
       "      <td>1,231</td>\n",
       "      <td>-37</td>\n",
       "      <td>-3.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1910</th>\n",
       "      <td>47.0</td>\n",
       "      <td>47381.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>沖縄県</td>\n",
       "      <td>竹富町</td>\n",
       "      <td>3,998</td>\n",
       "      <td>3,859</td>\n",
       "      <td>139</td>\n",
       "      <td>3.6</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1911</th>\n",
       "      <td>47.0</td>\n",
       "      <td>47382.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>沖縄県</td>\n",
       "      <td>与那国町</td>\n",
       "      <td>1,843</td>\n",
       "      <td>1,657</td>\n",
       "      <td>186</td>\n",
       "      <td>11.2</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 66 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      pref_code  pref_city_code  capital_city_flg  city_categories chiho  \\\n",
       "1907       47.0         47361.0               NaN              3.0   沖縄県   \n",
       "1908       47.0         47362.0               NaN              3.0   沖縄県   \n",
       "1909       47.0         47375.0               NaN              3.0   沖縄県   \n",
       "1910       47.0         47381.0               NaN              3.0   沖縄県   \n",
       "1911       47.0         47382.0               NaN              3.0   沖縄県   \n",
       "\n",
       "     city_name population h22_kumikae_population  \\\n",
       "1907      久米島町      7,755                  8,519   \n",
       "1908      八重瀬町     29,066                 26,681   \n",
       "1909      多良間村      1,194                  1,231   \n",
       "1910       竹富町      3,998                  3,859   \n",
       "1911      与那国町      1,843                  1,657   \n",
       "\n",
       "     population_changed_from_h22_to_h27  \\\n",
       "1907                               -764   \n",
       "1908                              2,385   \n",
       "1909                                -37   \n",
       "1910                                139   \n",
       "1911                                186   \n",
       "\n",
       "      rate_population_changed_from_h22_to_h27  \\\n",
       "1907                                     -9.0   \n",
       "1908                                      8.9   \n",
       "1909                                     -3.0   \n",
       "1910                                      3.6   \n",
       "1911                                     11.2   \n",
       "\n",
       "                      ...                   cars_per_person  \\\n",
       "1907                  ...                               NaN   \n",
       "1908                  ...                               NaN   \n",
       "1909                  ...                               NaN   \n",
       "1910                  ...                               NaN   \n",
       "1911                  ...                               NaN   \n",
       "\n",
       "     normal_cars_per_person  kei_cars_per_person  kei_rate normal_rate  \\\n",
       "1907                    NaN                  NaN       NaN         NaN   \n",
       "1908                    NaN                  NaN       NaN         NaN   \n",
       "1909                    NaN                  NaN       NaN         NaN   \n",
       "1910                    NaN                  NaN       NaN         NaN   \n",
       "1911                    NaN                  NaN       NaN         NaN   \n",
       "\n",
       "     kei_share_in_JP normal_share_in_JP guess_2nd_hand_kei_car_sales_per_year  \\\n",
       "1907             NaN                NaN                                   NaN   \n",
       "1908             NaN                NaN                                   NaN   \n",
       "1909             NaN                NaN                                   NaN   \n",
       "1910             NaN                NaN                                   NaN   \n",
       "1911             NaN                NaN                                   NaN   \n",
       "\n",
       "      guess_2nd_hand_normal_car_sales_per_year  \\\n",
       "1907                                       NaN   \n",
       "1908                                       NaN   \n",
       "1909                                       NaN   \n",
       "1910                                       NaN   \n",
       "1911                                       NaN   \n",
       "\n",
       "      guess_2nd_hand_car_all_sales_per_year  \n",
       "1907                                    NaN  \n",
       "1908                                    NaN  \n",
       "1909                                    NaN  \n",
       "1910                                    NaN  \n",
       "1911                                    NaN  \n",
       "\n",
       "[5 rows x 66 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#国勢調査と保有台数のマージ\n",
    "def left_merge_on_chiho(left,right,out):\n",
    "    out = pd.merge(left,right,on=\"chiho\",how=\"left\")\n",
    "    #一番下に謎の欠損行が存在するので削除する\n",
    "    out = out.dropna(subset=['pref_code'])\n",
    "    return out\n",
    "# left_merge_on_chiho(kokusei,hoyu,koku_hoyu)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>\n",
    "-----------------------国勢調査と保有台数のマージー終わり-----------------------<br>\n",
    "-----------------------保有車両数マージー始まり-----------------------\n",
    "<b/>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>\n",
    "-----------------------保有車両数マージー終わり-----------------------<br>\n",
    "-----------------------問い合わせ件数処理ー始まり-----------------------<br>\n",
    "<b/>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#pickle形式でdataframeを保存\n",
    "#超はやい\n",
    "#保存\n",
    "with open('test.pkl','wb') as f1:\n",
    "    pickle.dump(koku_hoyu,f1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#読み込み\n",
    "with open('test.pkl','rb') as f2:\n",
    "    data=pickle.load(f2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#以下車データの読み込み\n",
    "#車両データは全体取れてないので、取った後に縦結合して使う\n",
    "def mkdt_toiawase():\n",
    "    kuruma = pd.read_csv(\"/Users/01017387/Desktop/しごと/data/car用/加工済み/物件*問い合わせ/tes.csv\")\n",
    "    kuruma[\"b.shikuchoson_jusho_kj\"] = kuruma[\"b.shikuchoson_jusho_kj\"].str.replace('ヶ', 'ケ')\n",
    "    return kuruma"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#県単位、市区町村単位での地方別集計（問い合わせ）\n",
    "#入ってるレベル感が違う(市区町村で終わるものもあれば、町大字まで入っているものもある)\n",
    "#→市区町村が最後の文字になるように調整した変数を作成する\n",
    "def mkdt_dict_city():\n",
    "    #市区町村マスタと一致する部分のみ残す\n",
    "    dl = pd.read_csv(\"/Users/01017387/Desktop/しごと/data/car用/加工済み/市区町村マスタ.csv\",names=[\"pref\",\"city\"])\n",
    "\n",
    "    #h市区町村表記揺れを消したい\n",
    "    dl[\"city\"] = dl[\"city\"].str.replace('ヶ', 'ケ')\n",
    "    pre = dl[\"pref\"].unique() #array\n",
    "    #県内市区町村数のカウント用\n",
    "    dl[\"count\"] =1\n",
    "    num = dl.groupby(\"pref\").sum()\n",
    "    dc = num.to_dict()\n",
    "    dic = dc[\"count\"]\n",
    "\n",
    "    biglis = []\n",
    "    c=0\n",
    "    #都道府県別市区町村の格納\n",
    "    for i in pre:\n",
    "        tmplis = []\n",
    "        for k in range(int(dic[i])):\n",
    "            exec(\"tmplis.append(dl['city'][\"+str(c)+\"])\")\n",
    "            c +=1\n",
    "        #元データの入り方が札幌市→札幌市〇〇区、といった順で入っているので、上から部分一致で合致を探す際の障害になる\n",
    "        #ゆえに最初の要素を最後に持ってくる処理が必要\n",
    "        push_to_last = tmplis.pop(0)\n",
    "        tmplis.append(push_to_last)\n",
    "        biglis.append(tmplis)\n",
    "\n",
    "    #辞書の作成\n",
    "    dicts = {key: value for (key, value) in zip(pre,biglis)}\n",
    "    \n",
    "    return dic, dicts\n",
    "\n",
    "    #dfの各要素について、辞書のどこに一致するかを見て、ループで部分一致を探す\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def mkdt_toiawase_city():\n",
    "    ken = kuruma[\"b.todofuken_jusho_kj\"].values\n",
    "    aa = kuruma[\"b.shikuchoson_jusho_kj\"].values\n",
    "    aa\n",
    "    bb = []\n",
    "    counter =[]\n",
    "    #市区町村を格納してる順番が良くないので、並び替えが必要\n",
    "    for k,i in zip(ken,aa):\n",
    "        count=0\n",
    "        for l in dicts[k]:\n",
    "            if l in i:\n",
    "                bb.append(l)\n",
    "                counter.append(1)\n",
    "                break\n",
    "            count+=1\n",
    "            if count >=(len(dicts[k])):\n",
    "                bb.append(\"\")\n",
    "                counter.append(0)\n",
    "                break\n",
    "    #概ねOKだけど、県名の後に直接郡の名前が来るケースに対応できていない\n",
    "    # →修正面倒なので後回し\n",
    "    #スクレイピングで持ってくる必要ある：　http://www.geocities.jp/je2kcr/current_allgun.htm\n",
    "    #bbが欠損のものはとりあえず除外検討\n",
    "    \n",
    "    #bbをkurumaにマージ\n",
    "    kuruma[\"city_name\"] = bb\n",
    "    kuruma[\"count\"] = 1\n",
    "    #toiawase_dateの型を日付型に変更する必要ある\n",
    "    kuruma[\"toiawase_datetime\"] = pd.to_datetime(kuruma[\"b.toiawase_date\"].str[:10] + \" \" + kuruma[\"b.toiawase_date\"].str[10:])\n",
    "    kuruma[\"toiawase_y\"] = kuruma[\"toiawase_datetime\"].dt.year.astype(str)\n",
    "    kuruma[\"toiawase_m\"] = kuruma[\"toiawase_datetime\"].dt.month.astype(str)\n",
    "    kuruma[\"toiawase_ym\"] = kuruma[\"toiawase_y\"] + kuruma[\"toiawase_m\"]\n",
    "    \n",
    "    return kuruma\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>\n",
    "物件×問い合わせ元データ作成・・・ここまで<br>\n",
    "物件×問い合わせ辞書作成・・・ここから<br>\n",
    "（辞書じゃなくてサマった結果を民力と一緒に保持しておくのがいいかもしれない）\n",
    "<b/>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#地域別集計(問い合わせ)\n",
    "#全て辞書形式で持っておいて、実際の車に紐付ける形にする\n",
    "#実際の元データの車種名、地域、スペックと紐付けたドア数をキーにして辞書から値を作成する\n",
    "def convert_to_unit_based_num(data,colname,indice):\n",
    "    out = data.reset_index().pivot(index=indice,columns=colname,values=\"count\")\n",
    "    vals = []\n",
    "    #以上値の除去\n",
    "    for i in out.columns:\n",
    "        vals.append(out.columns.name+\"_\"+str(i))\n",
    "    out.columns=vals\n",
    "    out[indice] = out.index\n",
    "    del out.index.name\n",
    "    \n",
    "    return out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def shukei_by_area():\n",
    "    #都道府県\n",
    "    pref_summary = kuruma.groupby(\"b.todofuken_jusho_kj\").sum()[\"count\"]\n",
    "    pref_summary_dicts = {key: value for (key, value) in zip(pref_summary.index.values,pref_summary.values)}\n",
    "    kuruma[\"num_toiawase_in_pref\"] = kuruma[\"b.todofuken_jusho_kj\"].apply(pref_summary_dicts.get)\n",
    "\n",
    "    #市区町村\n",
    "    city_summary = kuruma.groupby(\"city_name\").sum()[\"count\"]\n",
    "    city_summary_dicts = {key: value for (key, value) in zip(city_summary.index.values,city_summary.values)}\n",
    "    kuruma[\"num_toiawase_in_city\"] = kuruma[\"city_name\"].apply(city_summary_dicts.get)\n",
    "\n",
    "    #都道府県/市区町村単位でボディタイプ、問合年月、ドア数で集計（計６パターン）\n",
    "    shukei_val = [\"a.body_type_name\", \"toiawase_ym\", \"a.door_su\"]\n",
    "    out_name = [\"body\", \"month\", \"door\",]\n",
    "\n",
    "    pref_city = [\"b.todofuken_jusho_kj\",\"city_name\"]\n",
    "    out_preposition = [\"pref\", \"city\"]\n",
    "\n",
    "    for s,o in zip(shukei_val,out_name):\n",
    "        for p,op in zip(pref_city,out_preposition):\n",
    "            exec(op+'_'+o+'_summary = kuruma.groupby([\"'+p+'\",\"'+s+'\"]).sum()[\"count\"]') #groupby().sum()[\"count\"]\n",
    "            exec(op+'_'+o+'_summary_dicts = {key: value for key, value in zip('+op+'_'+o+'_summary.index.values,'+op+'_'+o+'_summary.values)}') #辞書に格納\n",
    "            exec('kuruma[\"num_toiawase_'+o+'_in_'+p+'\"] = kuruma.apply(lambda x :'+op+'_'+o+'_summary_dicts.get((x[\"'+p+'\"],x[\"'+s+'\"])), 1)') #変数を問い合わせに追加\n",
    "            exec(o+'_by_'+op+' = convert_to_unit_based_num('+op+'_'+o+'_summary'+',\"'+str(s)+'\",\"'+p+'\")') #県別/市区町村別でテーブル作成\n",
    "\n",
    "    #出来上がったデータセットをすべてくっつける\n",
    "    cities = [body_by_city, door_by_city, month_by_city]\n",
    "    prefs = [body_by_pref, door_by_pref, month_by_pref]\n",
    "    #prefsの変数名を変更しておく必要がある\n",
    "    for p in prefs:\n",
    "        p = p.rename{columns=[\"chiho\":\"b.todofuken_jusho_kj\"]}\n",
    "    \n",
    "    #遅いと思われるけど、シンプルさを優先した\n",
    "    for c in cities:\n",
    "        pd.merge(koku_hoyu,c,on=\"city_name\")\n",
    "    for p in prefs:\n",
    "        pd.merge(koku_hoyu,p,on=\"chiho\")\n",
    "    \n",
    "    koku_hoyu_area = koku_hoyu.copy()\n",
    "    return koku_hoyu_area"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'NoneType' object has no attribute 'head'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-26-3b9c730eca72>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mdic\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mdicts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmkdt_dict_city\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mkuruma\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmkdt_toiawase_city\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mkuruma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0;31m# a,b,c,d,e,f = shukei_by_unit()\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;31m# a\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'NoneType' object has no attribute 'head'"
     ]
    }
   ],
   "source": [
    "__init__()\n",
    "kuruma = mkdt_toiawase()\n",
    "dic,dicts = mkdt_dict_city()\n",
    "kuruma = mkdt_toiawase_city()\n",
    "kuruma.head()\n",
    "# a,b,c,d,e,f = shukei_by_area()\n",
    "# a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#車種・グレード別集計（問い合わせ）\n",
    "# -車種ごと\n",
    "def shukei_by_cars():\n",
    "    shashu_summary = kuruma.groupby(\"a.keisai_shashu_kj\").sum()[\"count\"]\n",
    "    shashu_summary_dicts = {key: value for (key, value) in zip(shashu_summary.index.values,shashu_summary.values)}\n",
    "    kuruma[\"num_shashu\"] = kuruma[\"a.keisai_shashu_kj\"].apply(shashu_summary_dicts.get)\n",
    "    # -車種&グレードごと\n",
    "    shashu_grade_summary = kuruma.groupby([\"a.keisai_shashu_kj\",\"a.keisai_grade_name\"]).sum()[\"count\"]\n",
    "    shashu_grade_summary_dicts = {key: value for (key, value) in zip(shashu_grade_summary.index.values,shashu_grade_summary.values)}\n",
    "    kuruma[\"num_shashu_grade\"] = kuruma.apply(lambda x :shashu_grade_summary_dicts.get((x[\"a.keisai_shashu_kj\"],x[\"a.keisai_grade_name\"])), 1)\n",
    "    grade_by_shashu = convert_to_unit_based_num(shashu_grade_summary,\"a.keisai_shashu_kj\",\"a.keisai_grade_name\")\n",
    "\n",
    "    #body_typeごと\n",
    "    body_summary = kuruma.groupby(\"a.body_type_name\").sum()[\"count\"]\n",
    "    body_summary_dicts = {key: value for (key, value) in zip(body_summary.index.values,body_summary.values)}\n",
    "    kuruma[\"num_body_type\"] = kuruma[\"a.body_type_name\"].apply(body_summary_dicts.get)\n",
    "    #おまけ：ドア数単位\n",
    "    door_summary = kuruma.groupby(\"a.door_su\").sum()[\"count\"]\n",
    "    door_summary_dicts = {key: value for (key, value) in zip(door_summary.index.values,door_summary.values)}\n",
    "    kuruma[\"num_door\"] = kuruma[\"a.door_su\"].apply(door_summary_dicts.get)\n",
    "    #車種・グレード別集計（お気に入り）\n",
    "    \n",
    "    #地域みたいにまとめることができないので、個別のDFを吐き出しておく\n",
    "    return shashu_summary, grade_by_shashu, body_summary, door_summary\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#必要そうな変数は準備した\n",
    "#とりあえず加工前のものをマージしにかかる\n",
    "# kuruma.head().T\n",
    "# kuruma.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#辞書との連携が死ぬほど楽になる\n",
    "#apply(辞書.get)で値を入れられる\n",
    "# del kuruma[\"aa\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>------------------------------問い合わせデータ＆辞書作成ーここまで------------------------------<b/><br>\n",
    "<b>------------------------------成約データ読み込み(お気に入りの車種別集計のために必要)ーここから---------------------------<b/>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(10000, 123)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>wns_bukken_cd</th>\n",
       "      <th>shinkoyo_nohimbi_cd</th>\n",
       "      <th>hojin_cd</th>\n",
       "      <th>madoguchi_cd</th>\n",
       "      <th>chiho</th>\n",
       "      <th>coupon_flg</th>\n",
       "      <th>fair_flg</th>\n",
       "      <th>sd_flg</th>\n",
       "      <th>kuchikomi_flg</th>\n",
       "      <th>maker_name</th>\n",
       "      <th>...</th>\n",
       "      <th>y_cs</th>\n",
       "      <th>p_cs</th>\n",
       "      <th>y_other</th>\n",
       "      <th>p_other</th>\n",
       "      <th>kuchikomi_cnt</th>\n",
       "      <th>katashiki</th>\n",
       "      <th>cnt_total_price</th>\n",
       "      <th>avg_total_price</th>\n",
       "      <th>min_total_price</th>\n",
       "      <th>predicted_price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>810772</th>\n",
       "      <td>U00012656926</td>\n",
       "      <td>150102</td>\n",
       "      <td>303968</td>\n",
       "      <td>1</td>\n",
       "      <td>福岡県</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>ダイハツ</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.037452</td>\n",
       "      <td>0</td>\n",
       "      <td>0.148028</td>\n",
       "      <td>4</td>\n",
       "      <td>LA-L152S</td>\n",
       "      <td>445</td>\n",
       "      <td>3.382966e+05</td>\n",
       "      <td>80000.0</td>\n",
       "      <td>3.140288e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5301564</th>\n",
       "      <td>UZ0014935617</td>\n",
       "      <td>150403</td>\n",
       "      <td>219007</td>\n",
       "      <td>1</td>\n",
       "      <td>山梨県</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>ホンダ</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.074008</td>\n",
       "      <td>0</td>\n",
       "      <td>0.120010</td>\n",
       "      <td>4</td>\n",
       "      <td>DBA-KB2</td>\n",
       "      <td>1</td>\n",
       "      <td>3.212000e+06</td>\n",
       "      <td>3212000.0</td>\n",
       "      <td>2.410772e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4924075</th>\n",
       "      <td>UZ0013173022</td>\n",
       "      <td>141107</td>\n",
       "      <td>51721</td>\n",
       "      <td>115</td>\n",
       "      <td>宮城県</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>スバル</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.026905</td>\n",
       "      <td>0</td>\n",
       "      <td>0.124821</td>\n",
       "      <td>16</td>\n",
       "      <td>DBA-RJ2</td>\n",
       "      <td>156</td>\n",
       "      <td>1.082494e+06</td>\n",
       "      <td>328000.0</td>\n",
       "      <td>1.041860e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4500543</th>\n",
       "      <td>UD0015293572</td>\n",
       "      <td>150703</td>\n",
       "      <td>81727</td>\n",
       "      <td>5</td>\n",
       "      <td>滋賀県</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>スズキ</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.011554</td>\n",
       "      <td>0</td>\n",
       "      <td>0.144302</td>\n",
       "      <td>0</td>\n",
       "      <td>DBA-MA15S</td>\n",
       "      <td>72</td>\n",
       "      <td>1.242056e+06</td>\n",
       "      <td>739000.0</td>\n",
       "      <td>9.695125e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4635857</th>\n",
       "      <td>UJ0013369648</td>\n",
       "      <td>141003</td>\n",
       "      <td>30121</td>\n",
       "      <td>1</td>\n",
       "      <td>愛知県</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>三菱</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.032983</td>\n",
       "      <td>0</td>\n",
       "      <td>0.286805</td>\n",
       "      <td>54</td>\n",
       "      <td>GBD-U61V</td>\n",
       "      <td>1001</td>\n",
       "      <td>7.178082e+05</td>\n",
       "      <td>150000.0</td>\n",
       "      <td>4.494569e+05</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 123 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        wns_bukken_cd  shinkoyo_nohimbi_cd  hojin_cd  madoguchi_cd chiho  \\\n",
       "810772   U00012656926               150102    303968             1   福岡県   \n",
       "5301564  UZ0014935617               150403    219007             1   山梨県   \n",
       "4924075  UZ0013173022               141107     51721           115   宮城県   \n",
       "4500543  UD0015293572               150703     81727             5   滋賀県   \n",
       "4635857  UJ0013369648               141003     30121             1   愛知県   \n",
       "\n",
       "         coupon_flg  fair_flg  sd_flg  kuchikomi_flg maker_name  \\\n",
       "810772            1         0       0              1       ダイハツ   \n",
       "5301564           0         0       0              1        ホンダ   \n",
       "4924075           1         1       0              1        スバル   \n",
       "4500543           0         0       0              0        スズキ   \n",
       "4635857           1         1       0              1         三菱   \n",
       "\n",
       "              ...        y_cs      p_cs y_other   p_other kuchikomi_cnt  \\\n",
       "810772        ...           0  0.037452       0  0.148028             4   \n",
       "5301564       ...           0  0.074008       0  0.120010             4   \n",
       "4924075       ...           0  0.026905       0  0.124821            16   \n",
       "4500543       ...           0  0.011554       0  0.144302             0   \n",
       "4635857       ...           0  0.032983       0  0.286805            54   \n",
       "\n",
       "         katashiki cnt_total_price avg_total_price min_total_price  \\\n",
       "810772    LA-L152S             445    3.382966e+05         80000.0   \n",
       "5301564    DBA-KB2               1    3.212000e+06       3212000.0   \n",
       "4924075    DBA-RJ2             156    1.082494e+06        328000.0   \n",
       "4500543  DBA-MA15S              72    1.242056e+06        739000.0   \n",
       "4635857   GBD-U61V            1001    7.178082e+05        150000.0   \n",
       "\n",
       "         predicted_price  \n",
       "810772      3.140288e+05  \n",
       "5301564     2.410772e+06  \n",
       "4924075     1.041860e+06  \n",
       "4500543     9.695125e+05  \n",
       "4635857     4.494569e+05  \n",
       "\n",
       "[5 rows x 123 columns]"
      ]
     },
     "execution_count": 207,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "moto = pd.read_csv(\"/Users/01017387/Desktop/しごと/data/car用/加工済み/raw_data.csv\",delimiter=\" \")\n",
    "print(moto.shape)\n",
    "#きちんとテストする際に全量で実施する必要あり\n",
    "#要修正\n",
    "moto.head()\n",
    "#shashuとchihoに上段で作成したデータを紐付ける\n",
    "\n",
    "# 地域データ：koku_hoyu_area_cusdb（マージキー：chiho）\n",
    "# 車データ：shashu_summary, grade_by_shashu, body_summary, door_summary(マージキー：車種、車種、ボディタイプ、ドア数)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>------------------------------成約データ読み込みーここまで------------------------------<b/><br>\n",
    "<b>------------------------------お気に入りデータ作成ー開始---------------------------<b/>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#accessDBの形なので、取り込みを頑張る必要あり\n",
    "#→無理なのでWinでcsvにしてから取り込むことに\n",
    "#dask使わないと遅すぎて無理\n",
    "#元データ作成\n",
    "col = [\"wns_bukken_cd\", \"shinkoyo_nohimbi_cd\", \"han_cd\", \"hojin_cd\", \"madoguchi_cd\", \"sum_toiawase\",\n",
    "       \"base_plan_toiawase\", \"plan1_toiawase\", \"plan2_toiawase\", \"cart_add\", \"cart_delete\"]\n",
    "\n",
    "start = time.time()\n",
    "tes1 = dskdf.read_csv(\"/Users/01017387/Desktop/しごと/data/car用/from花香さん/csv/001.csv\",names=col)\n",
    "tes2 = dskdf.read_csv(\"/Users/01017387/Desktop/しごと/data/car用/from花香さん/csv/002.csv\",names=col)\n",
    "tes3 = dskdf.read_csv(\"/Users/01017387/Desktop/しごと/data/car用/from花香さん/csv/003.csv\",names=col)\n",
    "tes4 = dskdf.read_csv(\"/Users/01017387/Desktop/しごと/data/car用/from花香さん/csv/004.csv\",names=col)\n",
    "tes5 = dskdf.read_csv(\"/Users/01017387/Desktop/しごと/data/car用/from花香さん/csv/005.csv\",names=col)\n",
    "\n",
    "t1 = tes1.append(tes2)\n",
    "t2 = t1.append(tes3)\n",
    "t3 = t2.append(tes4)\n",
    "t4 = t3.append(tes5)\n",
    "\n",
    "t5 = t4.loc[:,[\"wns_bukken_cd\", \"shinkoyo_nohimbi_cd\", \"sum_toiawase\", \"cart_add\", \"cart_delete\"]]\n",
    "# t5.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# データが多すぎて先に車種単位にまとめないと処理不可能\n",
    "#物件tblからデータを抜いてきて（wns_bukken_cd,車種名、車種に関連するものだけ）突合、groupbyで車種ごとにサマるところからスタート\n",
    "tobe = moto.ix[:,[\"wns_bukken_cd\", \"shashu\", \"grade_cd\", \"grade_kukuri_cd\", \"body_type_cd\", \"body_type_name\"]]\n",
    "#rightはpandas DataFrameじゃないと何故か上手くいかない・・・\n",
    "bukken = th.merge(tobe,how=\"inner\",on=\"wns_bukken_cd\")\n",
    "bukken[\"count\"]=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>shashu</th>\n",
       "      <th>grade_cd</th>\n",
       "      <th>shinkoyo_nohimbi_cd</th>\n",
       "      <th>sum_toiawase</th>\n",
       "      <th>cart_add</th>\n",
       "      <th>cart_delete</th>\n",
       "      <th>count</th>\n",
       "      <th>cart_sum</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1007</td>\n",
       "      <td>G002</td>\n",
       "      <td>all</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1007</td>\n",
       "      <td>G003</td>\n",
       "      <td>all</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1シリーズ</td>\n",
       "      <td>G001</td>\n",
       "      <td>all</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1シリーズ</td>\n",
       "      <td>G008</td>\n",
       "      <td>all</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>206</td>\n",
       "      <td>G002</td>\n",
       "      <td>all</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  shashu grade_cd shinkoyo_nohimbi_cd  sum_toiawase  cart_add  cart_delete  \\\n",
       "0   1007     G002                 all             0         0            0   \n",
       "1   1007     G003                 all             1         3            1   \n",
       "2  1シリーズ     G001                 all             0         1            1   \n",
       "3  1シリーズ     G008                 all             0         0            0   \n",
       "4    206     G002                 all             0         3            1   \n",
       "\n",
       "   count  cart_sum  \n",
       "0      1         0  \n",
       "1      1         2  \n",
       "2      2         0  \n",
       "3      1         0  \n",
       "4      2         2  "
      ]
     },
     "execution_count": 197,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#全体のお気に入り数を出す\n",
    "zentai = bukken.groupby([\"shashu\",\"grade_cd\"]).sum()\n",
    "zen = zentai.reset_index()\n",
    "zen[\"shinkoyo_nohimbi_cd\"] = \"all\"\n",
    "zen[\"cart_sum\"] = zen[\"cart_add\"] - zen[\"cart_delete\"]\n",
    "zen.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>shashu</th>\n",
       "      <th>grade_cd</th>\n",
       "      <th>shinkoyo_nohimbi_cd</th>\n",
       "      <th>from_141031_1y_back_sum_toiawase</th>\n",
       "      <th>from_141031_1y_back_cart_add</th>\n",
       "      <th>from_141031_1y_back_cart_delete</th>\n",
       "      <th>from_141031_1y_back_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1007</td>\n",
       "      <td>G002</td>\n",
       "      <td>141031</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1007</td>\n",
       "      <td>G003</td>\n",
       "      <td>141031</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1シリーズ</td>\n",
       "      <td>G001</td>\n",
       "      <td>141031</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1シリーズ</td>\n",
       "      <td>G008</td>\n",
       "      <td>141031</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>206</td>\n",
       "      <td>G002</td>\n",
       "      <td>141031</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  shashu grade_cd  shinkoyo_nohimbi_cd  from_141031_1y_back_sum_toiawase  \\\n",
       "0   1007     G002               141031                                 0   \n",
       "1   1007     G003               141031                                 1   \n",
       "2  1シリーズ     G001               141031                                 0   \n",
       "3  1シリーズ     G008               141031                                 0   \n",
       "4    206     G002               141031                                 0   \n",
       "\n",
       "   from_141031_1y_back_cart_add  from_141031_1y_back_cart_delete  \\\n",
       "0                             0                                0   \n",
       "1                             3                                1   \n",
       "2                             1                                1   \n",
       "3                             0                                0   \n",
       "4                             3                                1   \n",
       "\n",
       "   from_141031_1y_back_count  \n",
       "0                          1  \n",
       "1                          1  \n",
       "2                          2  \n",
       "3                          1  \n",
       "4                          2  "
      ]
     },
     "execution_count": 190,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#期間を絞って（１年分、１ヶ月単位）お気に入り数の遷移を見る\n",
    "#最終的には車種、グレード、nohimbiをキーとした辞書を作成し、車種ごとのお気に入り数を当てる感じになる\n",
    "\n",
    "# shashuとgrade_cdでgroupbyする\n",
    "sam = bukken.groupby([\"shashu\",\"grade_cd\",\"shinkoyo_nohimbi_cd\"]).sum()\n",
    "#元テーブルとして使う\n",
    "samr = sam.reset_index()\n",
    "#shinkoyo_nohinbiが特定日付区間に入っているものだけを抜き出して、groupby(shashu,grade_cd)で処理する\n",
    "upper_date = 151030\n",
    "#upper_dateが100ずつ足されていく感じ\n",
    "#dataframeに入ってる最終日を超えたら処理中断\n",
    "limit = int(t5[\"shinkoyo_nohimbi_cd\"][len(t5)-1])\n",
    "loop_count=0\n",
    "\n",
    "while upper_date <= limit:\n",
    "    \n",
    "    #日付を絞ってループで回す\n",
    "    if len(samr[samr[samr[\"shinkoyo_nohimbi_cd\"] > (upper_date - 10000)][\"shinkoyo_nohimbi_cd\"] <= upper_date]) >0:\n",
    "        smpl = samr[samr[samr[\"shinkoyo_nohimbi_cd\"] > (upper_date - 10000)][\"shinkoyo_nohimbi_cd\"] < upper_date]\n",
    "    else:\n",
    "        pass\n",
    "    part = smpl.groupby([\"shashu\",\"grade_cd\"]).sum()\n",
    "    part.head()\n",
    "    datum = part.reset_index()\n",
    "    #変数名の加工\n",
    "\n",
    "    dt = str(datum[\"shinkoyo_nohimbi_cd\"][len(datum)-1])\n",
    "    col_list = [\"sum_toiawase\", \"cart_add\", \"cart_delete\", \"count\"]\n",
    "    new_col = [\"shashu\", \"grade_cd\", \"shinkoyo_nohimbi_cd\"]\n",
    "    for k in col_list:\n",
    "        new_col.append(\"from_\"+str(dt)+\"_1y_back_\"+k)\n",
    "\n",
    "    datum.columns = new_col\n",
    "    upper_date +=100\n",
    "    if int(upper_date/100%100) ==13:\n",
    "        upper_date = upper_date + 8700 #年を更新する処理\n",
    "\n",
    "    #初回ループでなければデータをマージしていく\n",
    "    #要修正\n",
    "    #マージでなくて、shinkoyo_nohimbi_cdの違うものが縦に積みあがるケースも考慮すべき\n",
    "    \n",
    "    if loop_count != 0:\n",
    "        moto.append(datum,on=[\"shashu\",\"grade_cd\"])\n",
    "    else:\n",
    "        moto = datum\n",
    "    loop_count +=1\n",
    "    \n",
    "#あとはこれをshashu,grade_cdで横に繋げていく(merge)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>------------------------------お気に入りデータ作成ーここまで------------------------------<b/><br>\n",
    "<b>------------------------------カタログ作成ー開始---------------------------<b/>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "parser_f() got an unexpected keyword argument 'npartitions'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-16-734b9e18665d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     46\u001b[0m     \u001b[0;31m#型指定がうまくいかなくてエラーになるので、すべてobjectで読み込む\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     47\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 48\u001b[0;31m         \u001b[0mexec\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'cat_'\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;34m' = dskdf.read_csv(\"/Users/01017387/Desktop/しごと/data/car用/車カタログ/'\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcat\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;34m'\",encoding=\"cp932\",npartitions=10,delimiter=\"\\t\",low_memory=False,dtype=\"object\",names='\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;34m')'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     49\u001b[0m     \u001b[0mcnt\u001b[0m \u001b[0;34m+=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     50\u001b[0m     \u001b[0;31m#登録日、更新日は不要なので読み込み時点で落とす\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<string>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32m/Users/01017387/anaconda/lib/python3.5/site-packages/dask/dataframe/io/csv.py\u001b[0m in \u001b[0;36mread\u001b[0;34m(urlpath, blocksize, collection, lineterminator, compression, sample, enforce, storage_options, **kwargs)\u001b[0m\n\u001b[1;32m    269\u001b[0m                            \u001b[0mcompression\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcompression\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msample\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    270\u001b[0m                            \u001b[0menforce\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0menforce\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstorage_options\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstorage_options\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 271\u001b[0;31m                            **kwargs)\n\u001b[0m\u001b[1;32m    272\u001b[0m     read.__doc__ = READ_DOC_TEMPLATE.format(reader=reader_name,\n\u001b[1;32m    273\u001b[0m                                             file_type=file_type)\n",
      "\u001b[0;32m/Users/01017387/anaconda/lib/python3.5/site-packages/dask/dataframe/io/csv.py\u001b[0m in \u001b[0;36mread_pandas\u001b[0;34m(reader, urlpath, blocksize, collection, lineterminator, compression, sample, enforce, storage_options, **kwargs)\u001b[0m\n\u001b[1;32m    204\u001b[0m         \u001b[0mheader\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msample\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb_lineterminator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mb_lineterminator\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    205\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 206\u001b[0;31m     \u001b[0mhead\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mreader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mBytesIO\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msample\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    207\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    208\u001b[0m     return text_blocks_to_pandas(reader, values, header, head, kwargs,\n",
      "\u001b[0;31mTypeError\u001b[0m: parser_f() got an unexpected keyword argument 'npartitions'"
     ]
    }
   ],
   "source": [
    "#全部で21種\n",
    "cat_list = [\"mc1_body_type.txt\", \"mc1_kanren_shashu.txt\",\"mc1_brand.txt\", \"mc1_kihon_iro.txt\",\"mc1_brand_country.txt\",\n",
    "            \"mc1_kukuri_kanren_shashu.txt\",\"mc1_brand_iro.txt\", \"mc1_maker.txt\",\"mc1_brand_maker.txt\", \"mc1_mc_model.txt\",\n",
    "            \"mc1_country.txt\", \"mc1_mc_model_gazo.txt\",\"mc1_fmc_model.txt\", \"mc1_net_category.txt\",\n",
    "            \"mc1_fp_shashu_midashi_settei_work.txt\", \"mc1_shashu.txt\",\"mc1_grade.txt\", \"mc1_sobi.txt\",\"mc1_grade_iro.txt\",\n",
    "            \"mc1_transmission_henkan.txt\",\"mc1_grade_sobi.txt\"]\n",
    "index_name =[\"ボディ形状マスタ\", \"関連車種マスタ\", \"ブランドマスタ\", \"基本色マスタ\", \"ブランド国設定マスタ\", \"括り関連車種マスタ\",\n",
    "             \"ブランド色マスタ\", \"メーカーマスタ\", \"ブランドメーカー設定マスタ\", \"MCモデルマスタ\", \"国マスタ\", \"MCモデル画像マスタ\",\n",
    "             \"FMCモデルマスタ\", \"NETカテゴリマスタ\", \"FP車種見出し設定マスタ\", \"車種マスタ\", \"グレードマスタ\", \"装備マスタ\",\n",
    "             \"グレード色設定マスタ\", \"トランスミッション変換マスタ\", \"グレード装備設定マスタ\", ]\n",
    "df_columns = [[\"body_shape_cd\", \"body_shape_nm\", \"register_ymd\", \"last_modified_ymd\"],\n",
    "              [\"kanren_shashu_cate\", \"kanren_shashu_cate_no\", \"kanren_kj\", \"register_ymd\", \"last_modified_ymd\"], \n",
    "              [\"brand_cd\", \"brand_nm\", \"brand_hyoji_order\", \"catalogue_keisai_fuka_cate\", \"seo_folder_nm\", \"register_ymd\", \"last_modified_ymd\"], \n",
    "              [\"base_color_cd\", \"base_color_nm\", \"base_color_hyoji_jun\", \"register_ymd\", \"last_modified_ymd\"], \n",
    "              [\"brand_cd\", \"country_cd\", \"daihyo_country_flg\", \"register_ymd\", \"last_modified_ymd\"], \n",
    "              [\"kanren_shashu_cate\", \"kanren_shashu_cate_no\", \"brand_cd\", \"shashu_cd\", \"kukuri_kanren_shashu_hyoji_jun\", \"register_ymd\", \"last_modified_ymd\"], \n",
    "              [\"brand_cd\", \"brand_color_cd\", \"brand_color_nm\", \"base_color_cd\", \"jitsu_brand_color_nm\", \"brand_color_hyoji_order\", \"base_color_cd1\", \"base_color_cd2\", \"register_ymd\", \"last_modified_ymd\"], \n",
    "              [\"maker_cd\", \"maker_nm\", \"maker_hyoji_jun\", \"register_ymd\", \"last_modified_ymd\"], \n",
    "              [\"brand_cd\", \"maker_cd\", \"daihyo_maker_flg\", \"register_ymd\", \"last_modified_ymd\"], \n",
    "              [\"brand_cd\", \"shashu_cd\", \"fmc_cd\", \"mc_cd\", \"mc_hanbai_start\", \"mc_hanbai_end\", \"mc_cate\", \"mc_kj\", \"mc_commment_title\", \"mc_comment\", \"catalogue_keisai_fuka_cate\", \"register_ymd\", \"last_modified_ymd\"], \n",
    "              [\"country_cd\", \"country_nm\", \"area_cate\", \"country_hyoji_jun\", \"register_ymd\", \"daihyo_base_color\", \"last_modified_ymd\"], \n",
    "              [\"brand_cd\", \"shashu_cd\", \"fmc_cd\", \"mc_cd\", \"gazo_index_no\", \"mc_model_pic_hyoji_jun\", \"gazo_cate_cd\", \"caption\", \"catalogue_keisai_fuka_cate\", \"register_ymd\", \"last_modified_ymd\"], \n",
    "              [\"brand_cd\", \"shashu_cd\", \"fmc_cd\", \"fmc_hanbai_start\", \"fmc_hanbai_end\", \"fmc_kj\", \"catalogue_keisai_fuka_cate\", \"register_ymd\", \"last_modified_ymd\"], \n",
    "              [\"net_cate_cd\", \"cate_nm\", \"net_cate_hyoji_jun\", \"register_ymd\", \"last_modified_ymd\"], \n",
    "              [\"brand_cd\", \"shashu_cd\", \"fmc_cd\", \"mc_cd\", \"grade_cd\", \"fp_cate_cd\", \"fp_shashu_midashi_cd\", \"register_ymd\", \"last_modified_ymd\"], \n",
    "              [\"brand_cd\", \"shashu_cd\", \"shashu_nm\", \"wareki_seireki_cate\", \"shashu_hyoji_jun\", \"catalogue_keisai_fuka_cate\", \"search_key_1\", \"search_key_2\", \"search_key_3\", \"seo_folder_nm\", \"register_ymd\", \"last_modified_ymd\"], \n",
    "              [\"brand_cd\", \"shashu_cd\", \"fmc_cd\", \"mc_cd\", \"grade_cd\", \"grade_kukuri_cd\", \"grade_nm\", \"grade_hyoji_jun\", \"body_shape_cd\", \"grade_hanbai_start_ym\", \"grade_hanbai_end_ym\", \"katashiki\", \"ruibetsu_kigo\", \"katashiki_shitei_no\", \"ruibetsu_cate_no\", \"price_with_tax\", \"price_without_tax\", \"nenpi_kijun_achieve_cate\", \"nenpi_kijun_nen\", \"low_emission_nintei_stars\", \"low_emission_nintei_nen\", \"reduce_tax_cate\", \"heiko_yunyusha_cate\", \"walfare_car_cate\", \"car_for_commercial_use\", \"kei_flg\", \"number_size\", \"special_edition_flg\", \"catalogue_keisai_fuka_cate\", \"keisai_commentary\", \"kudo_hoshiki_cate\", \"transmission_su\", \"transmission_cate\", \"transmission_ichi_cate\", \"transmission_cd\", \"handle_ichi_cate\", \"length\", \"width\", \"height\", \"inner_length\", \"inner_width\", \"inner_height\", \"wheel_base\", \"front_tred\", \"back_tred\", \"min_shako\", \"weight_of_car\", \"weight_of_car_all\", \"max_carriage\", \"max_carriage_persons\", \"min_kaiten_hankei\", \"10_15_mode_nenpiritsu\", \"stearing_gear_cate\", \"stearing_gear_nm\", \"front_suspension_cate\", \"front_suspension_nm\", \"back_suspension_cate\", \"back_suspension_nm\", \"front_break_cate\", \"front_break_nm\", \"back_break_cate\", \"back_break_nm\", \"front_tire_txt\", \"back_tire_txt\", \"engine_katashiki\", \"engine_valve_cate\", \"engine_silinder_cate\", \"engine_kito_su\", \"engine_kakyuki_cate\", \"engine_cate\", \"silinder_radius\", \"silinder_koutei\", \"total_haikiryo\", \"haikiryo1\", \"haikiryo2\", \"asshukuhi\", \"max_shuturyoku_kw\", \"max_shuturyoku_ps\", \"max_shuturyoku_rmp_max\", \"max_shuturyoku_rmp_min\", \"max_torque_mn\", \"max_torque_kgm\", \"max_torque_rpm_max\", \"max_torque_rpm_min\", \"fuel_sapply_device_cate\", \"fuel_cate\", \"fuel_tank_capacity\", \"door_su\", \"seat_columns\", \"net_cate_cd\", \"register_ymd\", \"last_modified_ymd\", \"jc08_mode_nenpi_rtsu\"], \n",
    "              [\"equipment_cd\", \"equipment_nm\", \"equipment_bunrui_cate\", \"catalogue_keisai_cate\", \"equipment_hyoji_jun\", \"equipment_usage_cd\", \"register_ymd\", \"last_modified_ymd\"], \n",
    "              [\"brand_cd\", \"shashu_cd\", \"fmc_cd\", \"mc_cd\", \"grade_cd\", \"brand_color_cd\", \"option_flg\", \"option_price\", \"grade_hyoji_jun\", \"register_ymd\", \"last_modified_ymd\"], \n",
    "              [\"transmission_cd\", \"transmission_su\", \"transmission_cate\", \"transmission_ichi_cate\", \"register_ymd\", \"last_modified_ymd\"], \n",
    "              [\"brand_cd\", \"shashu_cd\", \"fmc_cd\", \"mc_cd\", \"grade_cd\", \"equipment_cd\", \"equipment_nm\", \"equipment_jokyo_cd\", \"nm\", \"register_ymd\", \"last_modified_ymd\"]\n",
    "             ]\n",
    "#読んだ後にとりあえず全部くっつけたい\n",
    "co = 0\n",
    "df_names = []\n",
    "for ct in cat_list:\n",
    "    df_names.append(ct.rstrip(\".txt\")[4:])\n",
    "\n",
    "    \n",
    "start = time.time\n",
    "dfs = []\n",
    "cnt = 0\n",
    "for cat,dn,dc in zip(cat_list,df_names,df_columns):\n",
    "    if cat in [\"mc1_grade_sobi.txt\", \"mc1_grade_iro.txt\", \"mc1_brand_iro.txt\"]:\n",
    "        exec('cat_'+str(dn)+' = pd.read_csv(\"/Users/01017387/Desktop/しごと/data/car用/車カタログ/'+str(cat)+'\",encoding=\"cp932\",delimiter=\"\\t\",names='+str(dc)+')')\n",
    "    #型指定がうまくいかなくてエラーになるので、すべてobjectで読み込む\n",
    "    else:\n",
    "        exec('cat_'+str(dn)+' = dskdf.read_csv(\"/Users/01017387/Desktop/しごと/data/car用/車カタログ/'+str(cat)+'\",encoding=\"cp932\",npartitions=10,delimiter=\"\\t\",low_memory=False,dtype=\"object\",names='+str(dc)+')')\n",
    "    cnt +=1\n",
    "    #登録日、更新日は不要なので読み込み時点で落とす\n",
    "#     exec('\"cat_\"+'+str(dn)+'[\"last_modified_tmd\"]')\n",
    "    \n",
    "    #データ名もリストに格納しておく\n",
    "    dfs.append(\"cat_\"+str(dn))\n",
    "#     print('cat_'+str(dn))\n",
    "#     print(cat)\n",
    "#     co +=1\n",
    "#     if co ==17:\n",
    "#         break\n",
    "\n",
    "#少しでも軽くするために、不要な変数を削除しておく\n",
    "for dd in dfs:\n",
    "    exec(dd+'.drop(\"register_ymd\",axis=1)')\n",
    "    exec(dd+'.drop(\"last_modified_ymd\",axis=1)')\n",
    "    if dd == \"cat_grade\":\n",
    "        exec(dd+'.drop(\"number_size\",axis=1)')\n",
    "        exec(dd+'.drop(\"catalogue_keisai_fuka_cate\",axis=1)')\n",
    "    if dd == \"cat_mc_model\":\n",
    "        exec(dd+'.drop(\"catalogue_keisai_fuka_cate\",axis=1)')\n",
    "    if dd == \"cat_shashu\":\n",
    "        exec(dd+'.drop(\"catalogue_keisai_fuka_cate\",axis=1)')\n",
    "        exec(dd+'.drop(\"search_key_1\",axis=1)')\n",
    "        exec(dd+'.drop(\"search_key_2\",axis=1)')\n",
    "        exec(dd+'.drop(\"search_key_3\",axis=1)')\n",
    "        exec(dd+'.drop(\"seo_folder_nm\",axis=1)')\n",
    "    if dd == \"cat_sobi\":\n",
    "        exec(dd+'.drop(\"equipment_hyoji_jun\",axis=1)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#紐付け方を考える必要がある\n",
    "#最終的には車種ごとに出したいので、車種から作っていく\n",
    "\n",
    "#主に車種コードで紐付ける-shashu_cd\n",
    "cat_grade_sobi(グレード装備マスタ)\n",
    "→[\"pandasで作成、pivotして装備ごとのカラムを作ってから実施\"]\n",
    "cat_grade_iro(グレード色マスタ)(ブランドコード、車種コード、FMCコード、MCコード、グレードコード)\n",
    "→[\"pandasで作成、cat_brand_iroとブランド色コードでマージしてから、columnsにbase_color_cd、valuesにcountを置いたものをマージする\"]\n",
    "→上記２つをマージ、daskに中身を入れて処理続行\n",
    "\n",
    "cat_grade(グレードマスタ)(ブランドコード、車種コード、FMCコード、MCコード、グレードコード)\n",
    "cat_mc_model(MCモデルマスタ)(ブランドコード、車種コード、FMCコード、MCコード)\n",
    "cat_fmc_model(FMCモデルマスタ)(ブランドコード、車種コード、FMCコード)\n",
    "cat_shashu(車種マスタ)(ブランドコード、車種コード)\n",
    "cat_kukuri_kanren_shashu(括り関連車種マスタ)・・・類似車種のデータが入っている(ブランドコード、車種コード)\n",
    "↑\n",
    "# ボディ形状コードで紐付ける-body_shape_cd\n",
    "cat_body_type\n",
    "↑\n",
    "#トランスミッションコードで紐付ける-transmission_cd\n",
    "cat_transmission_henkan\n",
    "↑\n",
    "# ブランドコードでの紐付け-brand_cd\n",
    "cat_brand_country(ブランド国設定マスタ)(ブランドコード)\n",
    "cat_brand_maker(ブランドメーカーマスタ)(ブランドコード)\n",
    "cat_brand(ブランドマスタ)(ブランドコード)\n",
    "↑\n",
    "# 関連車種区分で紐付ける-kanren_shashu_cate\n",
    "cat_kanren_shashu\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>brand_cd</th>\n",
       "      <th>shashu_cd</th>\n",
       "      <th>fmc_cd</th>\n",
       "      <th>mc_cd</th>\n",
       "      <th>grade_cd</th>\n",
       "      <th>base_color_BG</th>\n",
       "      <th>base_color_BK</th>\n",
       "      <th>base_color_BL</th>\n",
       "      <th>base_color_BR</th>\n",
       "      <th>base_color_GL</th>\n",
       "      <th>base_color_GN</th>\n",
       "      <th>base_color_GY</th>\n",
       "      <th>base_color_NV</th>\n",
       "      <th>base_color_OR</th>\n",
       "      <th>base_color_PK</th>\n",
       "      <th>base_color_PP</th>\n",
       "      <th>base_color_RD</th>\n",
       "      <th>base_color_SL</th>\n",
       "      <th>base_color_WT</th>\n",
       "      <th>base_color_YL</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ME</td>\n",
       "      <td>S014</td>\n",
       "      <td>F004</td>\n",
       "      <td>M005</td>\n",
       "      <td>G002</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ME</td>\n",
       "      <td>S014</td>\n",
       "      <td>F004</td>\n",
       "      <td>M005</td>\n",
       "      <td>G003</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ME</td>\n",
       "      <td>S014</td>\n",
       "      <td>F004</td>\n",
       "      <td>M005</td>\n",
       "      <td>G004</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ME</td>\n",
       "      <td>S014</td>\n",
       "      <td>F004</td>\n",
       "      <td>M005</td>\n",
       "      <td>G005</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ME</td>\n",
       "      <td>S014</td>\n",
       "      <td>F004</td>\n",
       "      <td>M005</td>\n",
       "      <td>G006</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  brand_cd shashu_cd fmc_cd mc_cd grade_cd  base_color_BG  base_color_BK  \\\n",
       "0       ME      S014   F004  M005     G002            NaN            1.0   \n",
       "1       ME      S014   F004  M005     G003            NaN            1.0   \n",
       "2       ME      S014   F004  M005     G004            NaN            1.0   \n",
       "3       ME      S014   F004  M005     G005            NaN            1.0   \n",
       "4       ME      S014   F004  M005     G006            NaN            1.0   \n",
       "\n",
       "   base_color_BL  base_color_BR  base_color_GL  base_color_GN  base_color_GY  \\\n",
       "0            NaN            1.0            NaN            NaN            1.0   \n",
       "1            NaN            1.0            NaN            NaN            1.0   \n",
       "2            NaN            1.0            NaN            NaN            1.0   \n",
       "3            NaN            1.0            NaN            NaN            1.0   \n",
       "4            NaN            1.0            NaN            NaN            1.0   \n",
       "\n",
       "   base_color_NV  base_color_OR  base_color_PK  base_color_PP  base_color_RD  \\\n",
       "0            NaN            NaN            NaN            NaN            NaN   \n",
       "1            1.0            NaN            NaN            NaN            1.0   \n",
       "2            1.0            NaN            NaN            NaN            1.0   \n",
       "3            1.0            NaN            NaN            NaN            1.0   \n",
       "4            1.0            NaN            NaN            NaN            1.0   \n",
       "\n",
       "   base_color_SL  base_color_WT  base_color_YL  \n",
       "0            1.0            1.0            NaN  \n",
       "1            1.0            1.0            NaN  \n",
       "2            1.0            1.0            NaN  \n",
       "3            1.0            1.0            NaN  \n",
       "4            1.0            1.0            NaN  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#装備ごとに作られているテーブルが存在するので、装備をダミー変数化するためにpivotする必要がある\n",
    "#ダミー化した変数の内容がわかるように、全てにsobi_の接頭辞をつけておく\n",
    "cat_grade_sobi_pv = pd.pivot_table(cat_grade_sobi,index=[\"brand_cd\",\"shashu_cd\",\"fmc_cd\",\"mc_cd\",\"grade_cd\"],columns = \"equipment_nm\",values = \"equipment_jokyo_cd\").reset_index()\n",
    "col_equip = [\"sobi_\"+str(x) for x in cat_grade_sobi_pv.columns[5:,]]\n",
    "bs = ['brand_cd','shashu_cd','fmc_cd','mc_cd','grade_cd']\n",
    "bs.extend(col_equip)\n",
    "cat_grade_sobi_pv.columns = bs\n",
    "\n",
    "#grade_iroは先にbrand_iroとマージして、基本色を獲得しておく\n",
    "cat_grade_iro[\"count\"] = 1\n",
    "cat_grade_brand_iro =pd.merge(cat_grade_iro,cat_brand_iro.ix[:,[\"brand_cd\",\"brand_color_cd\",\"base_color_cd\"]],on=[\"brand_cd\",\"brand_color_cd\"])\n",
    "sum_grade_brand_iro = pd.pivot_table(cat_grade_brand_iro,index=[\"brand_cd\",\"shashu_cd\",\"fmc_cd\",\"mc_cd\",\"grade_cd\"],columns=\"base_color_cd\",values=\"count\").reset_index()\n",
    "\n",
    "#ダミー化した変数の内容がわかるように、全てにbase_color_の接頭辞をつけておく\n",
    "col_colors = [\"base_color_\"+str(x) for x in sum_grade_brand_iro.columns[5:,]]\n",
    "bs = ['brand_cd','shashu_cd','fmc_cd','mc_cd','grade_cd']\n",
    "bs.extend(col_colors)\n",
    "sum_grade_brand_iro.columns = bs\n",
    "sum_grade_brand_iro.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#上記前処理が終わったら、ループで各種データをマージする\n",
    "\n",
    "merge_key = [[\"brand_cd\",\"shashu_cd\",\"fmc_cd\",\"mc_cd\",\"grade_cd\"],[\"brand_cd\",\"shashu_cd\",\"fmc_cd\",\"mc_cd\"],\n",
    "             [\"brand_cd\",\"shashu_cd\",\"fmc_cd\"],[\"brand_cd\",\"shashu_cd\"],[\"brand_cd\",\"shashu_cd\"],\n",
    "             [\"body_shape_cd\"],[\"transmission_cd\"],[\"brand_cd\"],[\"brand_cd\"],[\"brand_cd\"],[\"kanren_shashu_cate\"]\n",
    "            ]\n",
    "\n",
    "merge_data = [\"cat_grade\",\"cat_mc_model\",\"cat_fmc_model\",\"cat_shashu\",\"cat_kukuri_kanren_shashu\",\"cat_body_type\",\n",
    "              \"cat_transmission_henkan\",\"cat_brand_country\",\"cat_brand_maker\",\"cat_brand\",\"cat_kanren_shashu\"\n",
    "             ]\n",
    "\n",
    "loops = np.array(list(range(11)))+2\n",
    "\n",
    "pandas_list=[\"mc1_body_type.txt\", \"mc1_kanren_shashu.txt\"]\n",
    "\n",
    "#dask_ver\n",
    "# a1 = cat_grade_sobi.merge(cat_grade_iro,on=[\"brand_cd\",\"shashu_cd\",\"fmc_cd\",\"mc_cd\",\"grade_cd\"])\n",
    "#pandas_ver\n",
    "moto = pd.merge(cat_grade_sobi_pv,sum_grade_brand_iro,on=[\"brand_cd\",\"shashu_cd\",\"fmc_cd\",\"mc_cd\",\"grade_cd\"])\n",
    "#a1をdask化\n",
    "a1 = dskdf.from_pandas(moto,npartitions=1)\n",
    "\n",
    "cnt = 0\n",
    "#dask_ver\n",
    "for mk,md,lp in zip(merge_key,merge_data,loops):\n",
    "#     a2 = a1.merge(cat_grade,on=[\"brand_cd\",\"shashu_cd\",\"fmc_cd\",\"mc_cd\",\"grade_cd\"])\n",
    "    exec('a'+str(lp)+' = a'+str(lp-1)+'.merge('+md+',on='+str(mk)+')')\n",
    "    \n",
    "#pandas_ver\n",
    "# for mk,md,lp in zip(merge_key,merge_data,loops):\n",
    "# #     a2 = a1.merge(cat_grade,on=[\"brand_cd\",\"shashu_cd\",\"fmc_cd\",\"mc_cd\",\"grade_cd\"])\n",
    "#     exec('a'+str(lp)+' = pd.merge(a'+str(lp-1)+','+md+',on='+str(mk)+')')\n",
    "\n",
    "\n",
    "#     cnt +=1\n",
    "#     if cnt >=3:\n",
    "#         break\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Can only repartition to fewer partitions",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-14-3e9dc7d7c8bd>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0ma12\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrepartition\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnpartitions\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mcloudpickle\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpickle\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m#clodpickleでlambda式とか、通常pickleに対応していないものまでpickleしておける\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# a = cloudpickle.dumps(a12)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/01017387/anaconda/lib/python3.5/site-packages/dask/dataframe/core.py\u001b[0m in \u001b[0;36mrepartition\u001b[0;34m(self, divisions, npartitions, force)\u001b[0m\n\u001b[1;32m    709\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mnpartitions\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    710\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mnpartitions\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnpartitions\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 711\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Can only repartition to fewer partitions\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    712\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mrepartition_npartitions\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnpartitions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    713\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mdivisions\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: Can only repartition to fewer partitions"
     ]
    }
   ],
   "source": [
    "a12.repartition(npartitions=10)\n",
    "import cloudpickle\n",
    "import pickle\n",
    "#clodpickleでlambda式とか、通常pickleに対応していないものまでpickleしておける\n",
    "# a = cloudpickle.dumps(a12)\n",
    "# a\n",
    "# pd.eval('df[\"a\"]+df[\"b\"]')\n",
    "# \"カラムの数値を足したものが返ってくる\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#ファイルが死ぬほど大きいので、pickleで退避させておく\n",
    "# with open('car_catalogue_dd.pkl','wb') as f1:\n",
    "#     pickle.dump(a12,f1)\n",
    "\n",
    "# with open('car_catalogue_dd.pkl','rb') as f2:\n",
    "#     data=pickle.load(f2)\n",
    "a12.to_csv(\"/Users/01017387/Desktop/しごと/data/car用/車カタログ/test/car_catalogue_ss.csv\")\n",
    "# a17.to_hdf(\"/Users/01017387/Desktop/しごと/data/car用/車カタログ/test/car_catalogue_ss.hdf\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>------------------------------カタログ作成ーここまで------------------------------<b/><br>\n",
    "<b>------------------------------カスタマDB作成ー開始---------------------------<b/>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "cus = pd.read_csv(\"/Users/01017387/Desktop/しごと/data/car用/cus_db.csv\")\n",
    "# 予測含め、地域が入ってないものを捨てる\n",
    "# 予測精度約７割程度はあるので、まあいいかなと\n",
    "city_drop_na = cus.dropna(subset=['pref_integration_cd'])\n",
    "#実際のデータセットはpref_integration_nmで作成する"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#フラグについては、とりあえず８割以上の確率が入っているものor真の値が入っているものを使う\n",
    "#幼児フラグはあるものだけ使う\n",
    "#フラグ対象：小学生以下子供フラグ、社会人フラグ、性別、カップル、\n",
    "# have_child_integration_flg, sex_integration, age_integration_cd, high_income_predict_flg,\n",
    "# businessperson_integration_flg, couple_flg, have_baby_flg, \n",
    "# car系フラグ #suumoはほとんど入ってないからもはや入れない\n",
    "# car_1w_pv_flg, car_1m_pv_flg, car_3m_pv_flg, car_6m_pv_flg, car_12m_pv_flg \n",
    "\n",
    "#セグメント分布(アクセス時間帯＋休日、平日とか)\n",
    "# sp_holiday_flg\n",
    "# sp_weekday_flg\n",
    "# pc_holiday_flg\n",
    "# pc_weekday_flg\n",
    "# holiday_flg\n",
    "# weekday_flg\n",
    "# sp_holiday_time_seg\n",
    "# sp_weekday_time_seg\n",
    "# pc_holiday_time_seg\n",
    "# pc_weekday_time_seg\n",
    "# holiday_time_seg\n",
    "# weekday_time_seg\n",
    "# weekday_device_seg\n",
    "\n",
    "#年収、年齢等の数値変数系は平均と中央値を入れる\n",
    "# annual_income_predict_value, annual_income_integration_cd,  age_integration_value,\n",
    "\n",
    "# 市区町村（そもそも埋まってる割合がやや低めなので、難しそうだけど）\n",
    "# city_integration_nm_1 ~ 3は一回見てみる必要がある\n",
    "# →精度がえらい低い（27%）なので使わない方がいいかも\n",
    "\n",
    "#cus_dbのよさ\n",
    "# →収入がより細かく見れるようになる\n",
    "# →幼児、小学生以下の子供とか、子供系がもう少し細かく見れる\n",
    "#Rのサービスユーザ、というバイアスをかけて対象を観察できる\n",
    "#セグメント分布を見れるようになる"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def summarize_cusdb():\n",
    "\n",
    "    tmp_dt = city_drop_na.ix[:,[\"count\",\"have_child_integration_flg\",\n",
    "                                \"pref_integration_nm\"]].groupby([\"pref_integration_nm\",\"have_child_integration_flg\"]).sum()\n",
    "    #県別にフラグの値をカウント\n",
    "    merged = tmp_dt.reset_index().pivot(index=tmp_dt.index.names[0], columns=tmp_dt.index.names[1], values=\"count\")\n",
    "    lis = []\n",
    "    for i in merged.columns:\n",
    "        lis.append(str(merged.columns.name)+\"_\"+str(i))\n",
    "    merged.columns = lis\n",
    "    del merged.index.name\n",
    "    merged[\"pref\"] = merged.index\n",
    "    # merged.head()\n",
    "\n",
    "    #変数を動的に与えて、ループでデータセットを作成＆append\n",
    "    #フラグ系対象変数\n",
    "    #sp系は数値が入っていないので、最初は抜いて試す\n",
    "    # iter_target = [\"sex_integration\", \"age_integration_cd\", \"high_income_predict_flg\",\n",
    "    #                \"businessperson_integration_flg\", \"couple_flg\", \"have_baby_flg\", \"car_1w_pv_flg\", \"car_1m_pv_flg\", \"car_3m_pv_flg\",\n",
    "    #                \"car_6m_pv_flg\", \"car_12m_pv_flg\", \"sp_holiday_flg\", \"sp_weekday_flg\", \"pc_holiday_flg\", \"pc_weekday_flg\", \"holiday_flg\",\n",
    "    #                \"weekday_flg\", \"sp_holiday_time_seg\", \"sp_weekday_time_seg\", \"pc_holiday_time_seg\", \"pc_weekday_time_seg\",\n",
    "    #                \"holiday_time_seg\", \"weekday_time_seg\", \"weekday_device_seg\"]\n",
    "    iter_target = [\"sex_integration\", \"age_integration_cd\", \"high_income_predict_flg\",\n",
    "                   \"businessperson_integration_flg\", \"couple_flg\", \"have_baby_flg\", \"car_1w_pv_flg\", \"car_1m_pv_flg\", \"car_3m_pv_flg\",\n",
    "                   \"car_6m_pv_flg\", \"car_12m_pv_flg\"]\n",
    "\n",
    "    loop_count = 0\n",
    "    for i in iter_target:\n",
    "        loop_count +=1\n",
    "        exec('tmp_dt = city_drop_na.ix[:,[\"count\",\"'+str(i)+'\",\"pref_integration_nm\"]].groupby([\"pref_integration_nm\",\"'+str(i)+'\"]).sum()')\n",
    "        #県別にフラグの値をカウント\n",
    "        tmp = tmp_dt.reset_index().pivot(index=tmp_dt.index.names[0], columns=tmp_dt.index.names[1], values=\"count\")\n",
    "        tmp_rate = tmp.copy()/len(city_drop_na)\n",
    "        #一時対応策：カラム名が同一になってしまい、後で不都合が起こるので、一時的に適当なカラム名を与える\n",
    "        tmp_lis = (np.array(list(range(len(tmp_rate.T))))+1)*10\n",
    "        tmp_rate.columns=tmp_lis\n",
    "\n",
    "        lis = []\n",
    "        for n in range(2):\n",
    "            for i in tmp.columns:\n",
    "                if n == 0:\n",
    "                    lis.append(str(tmp.columns.name)+\"_\"+str(i))\n",
    "                if n == 1:\n",
    "                    lis.append(str(tmp.columns.name)+\"_\"+str(i)+\"_rate\")\n",
    "\n",
    "        tmp = pd.concat([tmp,tmp_rate],axis=1)\n",
    "        tmp.columns = lis\n",
    "        del tmp.index.name\n",
    "        tmp[\"pref\"] = tmp.index\n",
    "        #率も入れる\n",
    "\n",
    "        #できたものを元のデータセットにマージしていく\n",
    "        merged = pd.merge(merged,tmp,on=\"pref\")\n",
    "    #     if loop_count >=11:\n",
    "    #         break\n",
    "    \n",
    "    #数値系の統合(年収、年齢：平均、中央値)\n",
    "    num_loop = [\"annual_income_predict_value\", \"annual_income_integration_cd\", \"age_integration_value\"]\n",
    "\n",
    "    for l in num_loop:\n",
    "        exec('tmp_mean = city_drop_na.ix[:,[\"'+str(l)+'\",\"pref_integration_nm\"]].groupby([\"pref_integration_nm\"]).mean()')\n",
    "        exec('tmp_med = city_drop_na.ix[:,[\"'+str(l)+'\",\"pref_integration_nm\"]].groupby([\"pref_integration_nm\"]).median()')\n",
    "        exec('tmp_mean.columns = [\"'+str(l)+'\"+\"_mean\"]')\n",
    "        exec('tmp_med.columns  = [\"'+str(l)+'\"+\"_med\"]')\n",
    "        tmp_mean[\"pref\"] = tmp_mean.index\n",
    "        tmp_med[\"pref\"] = tmp_med.index\n",
    "        merged = pd.merge(merged,tmp_mean,on=\"pref\")\n",
    "        merged = pd.merge(merged,tmp_med,on=\"pref\")\n",
    "\n",
    "        cus_extracted = merged.copy()\n",
    "        cus_extracted = cus_extracted.rename(columns={\"pref\":\"chiho\"})\n",
    "\n",
    "        return cus_extracted"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pref_code</th>\n",
       "      <th>pref_city_code</th>\n",
       "      <th>capital_city_flg</th>\n",
       "      <th>city_categories</th>\n",
       "      <th>chiho</th>\n",
       "      <th>city_name</th>\n",
       "      <th>population</th>\n",
       "      <th>h22_kumikae_population</th>\n",
       "      <th>population_changed_from_h22_to_h27</th>\n",
       "      <th>rate_population_changed_from_h22_to_h27</th>\n",
       "      <th>...</th>\n",
       "      <th>car_12m_pv_flg_0</th>\n",
       "      <th>car_12m_pv_flg_1</th>\n",
       "      <th>car_12m_pv_flg_0_rate</th>\n",
       "      <th>car_12m_pv_flg_1_rate</th>\n",
       "      <th>annual_income_predict_value_mean</th>\n",
       "      <th>annual_income_predict_value_med</th>\n",
       "      <th>annual_income_integration_cd_mean</th>\n",
       "      <th>annual_income_integration_cd_med</th>\n",
       "      <th>age_integration_value_mean</th>\n",
       "      <th>age_integration_value_med</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1100.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>北海道</td>\n",
       "      <td>札幌市</td>\n",
       "      <td>1,952,356</td>\n",
       "      <td>1,913,545</td>\n",
       "      <td>38,811</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3456</td>\n",
       "      <td>204</td>\n",
       "      <td>0.045354</td>\n",
       "      <td>0.002677</td>\n",
       "      <td>3.189625</td>\n",
       "      <td>2.6372</td>\n",
       "      <td>2.717213</td>\n",
       "      <td>2</td>\n",
       "      <td>40.027869</td>\n",
       "      <td>38.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1101.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>北海道</td>\n",
       "      <td>札幌市中央区</td>\n",
       "      <td>237,627</td>\n",
       "      <td>220,189</td>\n",
       "      <td>17,438</td>\n",
       "      <td>7.9</td>\n",
       "      <td>...</td>\n",
       "      <td>3456</td>\n",
       "      <td>204</td>\n",
       "      <td>0.045354</td>\n",
       "      <td>0.002677</td>\n",
       "      <td>3.189625</td>\n",
       "      <td>2.6372</td>\n",
       "      <td>2.717213</td>\n",
       "      <td>2</td>\n",
       "      <td>40.027869</td>\n",
       "      <td>38.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1102.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>北海道</td>\n",
       "      <td>札幌市北区</td>\n",
       "      <td>285,321</td>\n",
       "      <td>278,781</td>\n",
       "      <td>6,540</td>\n",
       "      <td>2.3</td>\n",
       "      <td>...</td>\n",
       "      <td>3456</td>\n",
       "      <td>204</td>\n",
       "      <td>0.045354</td>\n",
       "      <td>0.002677</td>\n",
       "      <td>3.189625</td>\n",
       "      <td>2.6372</td>\n",
       "      <td>2.717213</td>\n",
       "      <td>2</td>\n",
       "      <td>40.027869</td>\n",
       "      <td>38.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1103.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>北海道</td>\n",
       "      <td>札幌市東区</td>\n",
       "      <td>261,912</td>\n",
       "      <td>255,873</td>\n",
       "      <td>6,039</td>\n",
       "      <td>2.4</td>\n",
       "      <td>...</td>\n",
       "      <td>3456</td>\n",
       "      <td>204</td>\n",
       "      <td>0.045354</td>\n",
       "      <td>0.002677</td>\n",
       "      <td>3.189625</td>\n",
       "      <td>2.6372</td>\n",
       "      <td>2.717213</td>\n",
       "      <td>2</td>\n",
       "      <td>40.027869</td>\n",
       "      <td>38.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1104.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>北海道</td>\n",
       "      <td>札幌市白石区</td>\n",
       "      <td>209,584</td>\n",
       "      <td>204,259</td>\n",
       "      <td>5,325</td>\n",
       "      <td>2.6</td>\n",
       "      <td>...</td>\n",
       "      <td>3456</td>\n",
       "      <td>204</td>\n",
       "      <td>0.045354</td>\n",
       "      <td>0.002677</td>\n",
       "      <td>3.189625</td>\n",
       "      <td>2.6372</td>\n",
       "      <td>2.717213</td>\n",
       "      <td>2</td>\n",
       "      <td>40.027869</td>\n",
       "      <td>38.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 158 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   pref_code  pref_city_code  capital_city_flg  city_categories chiho  \\\n",
       "0        1.0          1100.0               1.0              1.0   北海道   \n",
       "1        1.0          1101.0               NaN              0.0   北海道   \n",
       "2        1.0          1102.0               NaN              0.0   北海道   \n",
       "3        1.0          1103.0               NaN              0.0   北海道   \n",
       "4        1.0          1104.0               NaN              0.0   北海道   \n",
       "\n",
       "  city_name population h22_kumikae_population  \\\n",
       "0       札幌市  1,952,356              1,913,545   \n",
       "1    札幌市中央区    237,627                220,189   \n",
       "2     札幌市北区    285,321                278,781   \n",
       "3     札幌市東区    261,912                255,873   \n",
       "4    札幌市白石区    209,584                204,259   \n",
       "\n",
       "  population_changed_from_h22_to_h27  rate_population_changed_from_h22_to_h27  \\\n",
       "0                             38,811                                      2.0   \n",
       "1                             17,438                                      7.9   \n",
       "2                              6,540                                      2.3   \n",
       "3                              6,039                                      2.4   \n",
       "4                              5,325                                      2.6   \n",
       "\n",
       "             ...             car_12m_pv_flg_0 car_12m_pv_flg_1  \\\n",
       "0            ...                         3456              204   \n",
       "1            ...                         3456              204   \n",
       "2            ...                         3456              204   \n",
       "3            ...                         3456              204   \n",
       "4            ...                         3456              204   \n",
       "\n",
       "   car_12m_pv_flg_0_rate  car_12m_pv_flg_1_rate  \\\n",
       "0               0.045354               0.002677   \n",
       "1               0.045354               0.002677   \n",
       "2               0.045354               0.002677   \n",
       "3               0.045354               0.002677   \n",
       "4               0.045354               0.002677   \n",
       "\n",
       "  annual_income_predict_value_mean annual_income_predict_value_med  \\\n",
       "0                         3.189625                          2.6372   \n",
       "1                         3.189625                          2.6372   \n",
       "2                         3.189625                          2.6372   \n",
       "3                         3.189625                          2.6372   \n",
       "4                         3.189625                          2.6372   \n",
       "\n",
       "  annual_income_integration_cd_mean annual_income_integration_cd_med  \\\n",
       "0                          2.717213                                2   \n",
       "1                          2.717213                                2   \n",
       "2                          2.717213                                2   \n",
       "3                          2.717213                                2   \n",
       "4                          2.717213                                2   \n",
       "\n",
       "   age_integration_value_mean  age_integration_value_med  \n",
       "0                   40.027869                       38.0  \n",
       "1                   40.027869                       38.0  \n",
       "2                   40.027869                       38.0  \n",
       "3                   40.027869                       38.0  \n",
       "4                   40.027869                       38.0  \n",
       "\n",
       "[5 rows x 158 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#最後に市区町村単位にサマッたカスタマDBを民力にマージする\n",
    "koku_hoyu_area_cusdb = pd.merge(koku_hoyu_area,cus_extracted,on=\"chiho\")\n",
    "koku_hoyu_area_cusdb.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "<b>------------------------------カスタマDB作成ーここまで---------------------------<br>\n",
    "------------------------------市区町村名と対応した辞書作成作成ー開始---------------------------<br>\n",
    "<b/>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>\n",
    "------------------------------市区町村名と対応した辞書作成作成ー終わり---------------------------<br>\n",
    "<b/>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>wns_bukken_cd</th>\n",
       "      <th>shinkoyo_nohimbi_cd</th>\n",
       "      <th>hojin_cd</th>\n",
       "      <th>madoguchi_cd</th>\n",
       "      <th>chiho</th>\n",
       "      <th>coupon_flg</th>\n",
       "      <th>fair_flg</th>\n",
       "      <th>sd_flg</th>\n",
       "      <th>kuchikomi_flg</th>\n",
       "      <th>maker_name</th>\n",
       "      <th>...</th>\n",
       "      <th>y_cs</th>\n",
       "      <th>p_cs</th>\n",
       "      <th>y_other</th>\n",
       "      <th>p_other</th>\n",
       "      <th>kuchikomi_cnt</th>\n",
       "      <th>katashiki</th>\n",
       "      <th>cnt_total_price</th>\n",
       "      <th>avg_total_price</th>\n",
       "      <th>min_total_price</th>\n",
       "      <th>predicted_price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>810772</th>\n",
       "      <td>U00012656926</td>\n",
       "      <td>150102</td>\n",
       "      <td>303968</td>\n",
       "      <td>1</td>\n",
       "      <td>福岡県</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>ダイハツ</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.037452</td>\n",
       "      <td>0</td>\n",
       "      <td>0.148028</td>\n",
       "      <td>4</td>\n",
       "      <td>LA-L152S</td>\n",
       "      <td>445</td>\n",
       "      <td>3.382966e+05</td>\n",
       "      <td>80000.0</td>\n",
       "      <td>3.140288e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5301564</th>\n",
       "      <td>UZ0014935617</td>\n",
       "      <td>150403</td>\n",
       "      <td>219007</td>\n",
       "      <td>1</td>\n",
       "      <td>山梨県</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>ホンダ</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.074008</td>\n",
       "      <td>0</td>\n",
       "      <td>0.120010</td>\n",
       "      <td>4</td>\n",
       "      <td>DBA-KB2</td>\n",
       "      <td>1</td>\n",
       "      <td>3.212000e+06</td>\n",
       "      <td>3212000.0</td>\n",
       "      <td>2.410772e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4924075</th>\n",
       "      <td>UZ0013173022</td>\n",
       "      <td>141107</td>\n",
       "      <td>51721</td>\n",
       "      <td>115</td>\n",
       "      <td>宮城県</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>スバル</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.026905</td>\n",
       "      <td>0</td>\n",
       "      <td>0.124821</td>\n",
       "      <td>16</td>\n",
       "      <td>DBA-RJ2</td>\n",
       "      <td>156</td>\n",
       "      <td>1.082494e+06</td>\n",
       "      <td>328000.0</td>\n",
       "      <td>1.041860e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4500543</th>\n",
       "      <td>UD0015293572</td>\n",
       "      <td>150703</td>\n",
       "      <td>81727</td>\n",
       "      <td>5</td>\n",
       "      <td>滋賀県</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>スズキ</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.011554</td>\n",
       "      <td>0</td>\n",
       "      <td>0.144302</td>\n",
       "      <td>0</td>\n",
       "      <td>DBA-MA15S</td>\n",
       "      <td>72</td>\n",
       "      <td>1.242056e+06</td>\n",
       "      <td>739000.0</td>\n",
       "      <td>9.695125e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4635857</th>\n",
       "      <td>UJ0013369648</td>\n",
       "      <td>141003</td>\n",
       "      <td>30121</td>\n",
       "      <td>1</td>\n",
       "      <td>愛知県</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>三菱</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.032983</td>\n",
       "      <td>0</td>\n",
       "      <td>0.286805</td>\n",
       "      <td>54</td>\n",
       "      <td>GBD-U61V</td>\n",
       "      <td>1001</td>\n",
       "      <td>7.178082e+05</td>\n",
       "      <td>150000.0</td>\n",
       "      <td>4.494569e+05</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 123 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        wns_bukken_cd  shinkoyo_nohimbi_cd  hojin_cd  madoguchi_cd chiho  \\\n",
       "810772   U00012656926               150102    303968             1   福岡県   \n",
       "5301564  UZ0014935617               150403    219007             1   山梨県   \n",
       "4924075  UZ0013173022               141107     51721           115   宮城県   \n",
       "4500543  UD0015293572               150703     81727             5   滋賀県   \n",
       "4635857  UJ0013369648               141003     30121             1   愛知県   \n",
       "\n",
       "         coupon_flg  fair_flg  sd_flg  kuchikomi_flg maker_name  \\\n",
       "810772            1         0       0              1       ダイハツ   \n",
       "5301564           0         0       0              1        ホンダ   \n",
       "4924075           1         1       0              1        スバル   \n",
       "4500543           0         0       0              0        スズキ   \n",
       "4635857           1         1       0              1         三菱   \n",
       "\n",
       "              ...        y_cs      p_cs y_other   p_other kuchikomi_cnt  \\\n",
       "810772        ...           0  0.037452       0  0.148028             4   \n",
       "5301564       ...           0  0.074008       0  0.120010             4   \n",
       "4924075       ...           0  0.026905       0  0.124821            16   \n",
       "4500543       ...           0  0.011554       0  0.144302             0   \n",
       "4635857       ...           0  0.032983       0  0.286805            54   \n",
       "\n",
       "         katashiki cnt_total_price avg_total_price min_total_price  \\\n",
       "810772    LA-L152S             445    3.382966e+05         80000.0   \n",
       "5301564    DBA-KB2               1    3.212000e+06       3212000.0   \n",
       "4924075    DBA-RJ2             156    1.082494e+06        328000.0   \n",
       "4500543  DBA-MA15S              72    1.242056e+06        739000.0   \n",
       "4635857   GBD-U61V            1001    7.178082e+05        150000.0   \n",
       "\n",
       "         predicted_price  \n",
       "810772      3.140288e+05  \n",
       "5301564     2.410772e+06  \n",
       "4924075     1.041860e+06  \n",
       "4500543     9.695125e+05  \n",
       "4635857     4.494569e+05  \n",
       "\n",
       "[5 rows x 123 columns]"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>\n",
    "------------------------------データ読み込みステップー終わり---------------------------<br>\n",
    "<b/>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
